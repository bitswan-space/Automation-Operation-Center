name: CI Pipeline

on:
  push:
    paths:
      - "django/**"
      - ".github/workflows/django.yml"

jobs:
  lint:
    name: Precommit Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Install Pre-Commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run Pre-Commit
        env:
          PRE_COMMIT_HOME: ${{ github.workspace }}/django/.cache/pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      POSTGRES_USER: "bitswan_backend"
      POSTGRES_PASSWORD: ""
      POSTGRES_DB: "test_bitswan_backend"
      POSTGRES_HOST_AUTH_METHOD: trust
      CELERY_BROKER_URL: "redis://redis:6379/0"
      DOCKER_REGISTRY: public.ecr.aws/bitswan
      AWS_DEFAULT_REGION: us-east-1
      DOCKER_IMAGE: bitswan-backend
    services:
      docker:
        image: docker:20.10.7-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Dependencies
        run: |
          apk add --no-cache docker-cli git
          aws --version
          docker --version

      - name: Log in to ECR Public
        env:
          DOCKER_REGISTRY: public.ecr.aws/bitswan
        run: |
          aws ecr-public get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY

      - name: Build and Push Docker Images
        env:
          YEAR: $(date +%Y)
          COMMIT_HASH: $(git rev-parse --short HEAD)
          CI_PIPELINE_IID: $GITHUB_RUN_ID
        run: |
          SERVICES=("django" "postgres" "awscli")
          CONTEXTS=("./django/compose/production/django" "./django/compose/production/postgres" "./django/compose/production/aws")
          IMAGES=("bitswan-backend-production-django" "bitswan-backend-production-postgres" "bitswan-backend-production-awscli")
          USAGE_MESSAGES=""

          for i in "${!SERVICES[@]}"; do
            SERVICE=${SERVICES[$i]}
            CONTEXT=${CONTEXTS[$i]}
            IMAGE=${IMAGES[$i]}
            FULL_IMAGE_NAME=$DOCKER_REGISTRY/$IMAGE:latest

            echo "Building and pushing image for $SERVICE"
            docker build -t $FULL_IMAGE_NAME --build-arg COMMIT_HASH=$COMMIT_HASH --build-arg BUILD_NO=$GITHUB_RUN_ID -f $CONTEXT/Dockerfile $CONTEXT

            IMAGE_ID=$(docker images --no-trunc -q $DOCKER_REGISTRY/$IMAGE:latest)
            ID_TAG=$(echo $IMAGE_ID | sed 's/:/_/g')
            IMAGE_ID_TAG=$DOCKER_REGISTRY/$IMAGE:$ID_TAG

            docker tag $FULL_IMAGE_NAME $IMAGE_ID_TAG
            docker push $FULL_IMAGE_NAME
            docker push $IMAGE_ID_TAG

            echo "Image for $SERVICE pushed: $IMAGE_ID_TAG"
            USAGE_MESSAGES="${USAGE_MESSAGES}Now you can use $IMAGE_ID_TAG in your docker-compose file.\n"
          done

          echo -e "Images built and pushed successfully. \n$USAGE_MESSAGES"
